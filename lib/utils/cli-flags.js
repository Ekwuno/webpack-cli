const Validator = require("../utils/file-path-validation");

const ArgsValidator = new Validator();

const HELP_GROUP = "Help options:";
const CONFIG_GROUP = "Config options:";
const BASIC_GROUP = "Basic options:";
const OUTPUT_GROUP = "Output options:";
const ADVANCED_GROUP = "Advanced options:";
const DISPLAY_GROUP = "Stats options:";

module.exports = {
	commands: [
		{
			name: "create",
			alias: "c",
			scope: "external",
			type: String,
			description: "Initialize a new webpack configuration"
		},
		{
			name: "build",
			alias: "b",
			scope: "external",
			type: String,
			description: "Build a project"
		},
		{
			name: "migrate",
			alias: "m",
			scope: "external",
			type: String,
			description: "Migrate a configuration to a new version"
		},
		{
			name: "add",
			scope: "external",
			alias: "a",
			type: String,
			description: "Add a property to your configuration"
		},
		{
			name: "remove",
			scope: "external",
			alias: "r",
			type: String,
			description: "Remove a property from your configuration"
		},
		{
			name: "update",
			alias: "u",
			scope: "external",
			type: String,
			description: "Update a property in your webpack configuration"
		},
		{
			name: "make",
			alias: "m",
			scope: "internal",
			type: String,
			description: "Makefile build for your webpack configuration"
		},
		{
			name: "serve",
			alias: "s",
			type: String,
			description: "Start a development server with webpack"
		},
		{
			name: "loader",
			scope: "external",
			alias: "l",
			type: String,
			description: "Scaffold a loader repository"
		},
		{
			name: "plugin",
			alias: "p",
			scope: "external",
			type: String,
			description: "Scaffold a plugin repository"
		},
		{
			name: "info",
			scope: "external",
			type: String,
			description: "Outputs information about your system and dependencies"
		},
		{
			name: "interactive",
			scope: "internal",
			type: String,
			alias: "i",
			description: "Use webpack interactively"
		},
		{
			name: "analyze",
			type: Boolean,
			description:
				"Analyze webpack for performance"
		},
	],
	core: [
		{
			name: "entry",
			type: file => ArgsValidator.resolveFilePath(file, "index"),
			defaultValue: ArgsValidator.resolveFilePath(null, "index"),
			defaultOption: true,
			group: BASIC_GROUP,
			description: "The entry point of your application"
		},
		// TODO: array configs, 0cjs obj assign
		{
			name: "config",
			alias: "c",
			type: file => ArgsValidator.resolveFilePath(file, "webpack.config"),
			defaultValue: ArgsValidator.resolveFilePath(null, "webpack.config"),
			group: CONFIG_GROUP,
			description: "Path to a webpack configuration file"
		},
		// TBD: check for installed dep in pkg json
		{
			name: "register",
			type: String,
			multiple: true,
			alias: "r",
			group: CONFIG_GROUP,
			description:
				"Preload one or more modules before loading the webpack configuration"
		},
		// TBD: Check flag
		{
			name: "merge",
			alias: "m",
			type: String,
			group: CONFIG_GROUP,
			description: "Merge a configuration file"
		},
		// TBD: Manual impl
		{
			name: "progress",
			type: string =>
				ArgsValidator.setArrayVal(string, ["bar", "circular"], "bar"),
			description: "Print compilation progress in percentage",
			group: BASIC_GROUP
		},
		{
			name: "colors",
			type: Boolean,
			defaultValue: true,
			group: DISPLAY_GROUP,
			description: "Enables/Disables colors on the console"
		},
		// TBD: Manual impl
		{
			name: "quiet",
			alias: "q",
			type: Boolean,
			group: DISPLAY_GROUP,
			description: "Suppress any output"
		},
		// TBD: Manual impl
		{
			name: "verbose",
			alias: "v",
			type: Boolean,
			group: DISPLAY_GROUP,
			description: "Show more details"
		},
		// TBD: prettify asci
		{
			name: "help",
			type: Boolean,
			group: HELP_GROUP,
			description: "Outputs the list of arguments"
		},
		// TBD: done, needs testing
		{
			name: "output",
			alias: "o",
			group: OUTPUT_GROUP,
			type: file => ArgsValidator.resolveFileDirectory(file, "dist"),
			description: "The output path where webpack will generate files"
		},
		// TBD
		{
			name: "filename",
			alias: "f",
			group: OUTPUT_GROUP,
			type: string => ArgsValidator.setString(string, "bundle.js"),
			description: "Name the output file generated by webpack"
		},
		// TBD: use provideplugin
		{
			name: "global",
			alias: "g",
			type: String,
			group: ADVANCED_GROUP,
			description: "Declares and exposes a global variable."
		},
		// TBD: assign props
		{
			name: "target",
			alias: "t",
			type: String,
			group: ADVANCED_GROUP,
			description: "Sets the build target"
		},
		// TBD assign props
		{
			name: "cache",
			type: Boolean,
			group: ADVANCED_GROUP,
			description: "Cache modules to improve compilation speed."
		},
		// TBD: needs testing
		{
			name: "watch",
			type: Boolean,
			alias: "w",
			group: BASIC_GROUP,
			description: "Watch for files changes."
		},
		// TBD
		{
			name: "hot",
			alias: "h",
			type: Boolean,
			group: ADVANCED_GROUP,
			description: "Enables Hot Module Replacement."
		},
		// TBD
		{
			name: "debug",
			type: Boolean,
			group: BASIC_GROUP,
			description: "Switch loaders to debug mode"
		},
		// TBD assign props
		{
			name: "sourcemap",
			type: String,
			alias: "s",
			defaultValue: "eval",
			group: BASIC_GROUP,
			description: "Determine which source maps to use when bundling"
		},
		// TBD assign props
		{
			name: "prefetch",
			type: String,
			group: ADVANCED_GROUP,
			description: "Prefetch this request"
		},
		// TBD assign expose loader
		{
			name: "declare",
			type: String,
			group: ADVANCED_GROUP,
			description: "Expose a global variable to require in a module"
		},
		// TBD use stats jsonOutput
		{
			name: "json",
			type: Boolean,
			alias: "j",
			description: "Prints result as JSON.",
			group: DISPLAY_GROUP
		},
		// TBD add plugin to prop
		{
			name: "plugin",
			type: String,
			group: ADVANCED_GROUP,
			description: "Load a plugin."
		},
		// TBD set defaults
		{
			name: "dev",
			alias: "d",
			type: Boolean,
			defaultValue: false,
			group: BASIC_GROUP,
			description: "Run development build"
		},
		// TBD set defaults
		{
			name: "prod",
			alias: "p",
			type: Boolean,
			defaultValue: true,
			group: BASIC_GROUP,
			description: "Run production build"
		}
	]
};
